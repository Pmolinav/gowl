services:
  ## DATABASE
  postgres:
    container_name: postgres
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: users
    volumes:
      - data-postgres:/var/lib/postgresql/data
      - ./scripts/docker-compose/init_dbs.sh:/docker-entrypoint-initdb.d/init_dbs.sh:ro
    restart: always
    networks:
      - default

  ## APIS
  authapi:
    container_name: authapi
    build:
      context: ./apis/AuthApi
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
      - "5003:5003" # Debugging port
    depends_on:
      - redis
      - mailhog
      - logstash
    env_file: apis/AuthApi/.env
    environment:
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5003
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    networks:
      - default
    restart: always

  leagueapi:
    container_name: leagueapi
    build:
      context: ./apis/LeagueApi
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
      - "5006:5006" # Debugging port
    env_file: apis/LeagueApi/.env
    depends_on:
      - logstash
    environment:
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.50"
    networks:
      - default
    restart: always

  predictionapi:
    container_name: predictionapi
    build:
      context: ./apis/PredictionApi
      dockerfile: Dockerfile
    ports:
      - "8009:8009"
      - "5009:5009" # Debugging port
    env_file: apis/PredictionApi/.env
    depends_on:
      - logstash
    environment:
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5009
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.50"
    networks:
      - default
    restart: always

  ## BACKOFFICE
  leaguesboapi:
    container_name: leaguesboapi
    build:
      context: ./backoffice/LeaguesBOApi
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
      - "5005:5005" # Debugging port
    env_file: backoffice/LeaguesBOApi/.env
    environment:
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.50"
    networks:
      - default
    restart: always

  predictionsboapi:
    container_name: predictionsboapi
    build:
      context: ./backoffice/PredictionsBOApi
      dockerfile: Dockerfile
    ports:
      - "8008:8008"
      - "5008:5008" # Debugging port
    env_file: backoffice/PredictionsBOApi/.env
    environment:
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.50"
    networks:
      - default
    restart: always

  usersboapi:
    container_name: usersboapi
    build:
      context: ./backoffice/UsersBOApi
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
      - "5002:5002" # Debugging port
    env_file: backoffice/UsersBOApi/.env
    environment:
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5002
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.50"
    networks:
      - default
    restart: always

  ## SERVICES
  leaguesservice:
    container_name: leaguesservice
    build:
      context: ./services/LeaguesService
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
      - "5004:5004" # Debugging port
    depends_on:
      - postgres
    #      - kafka
    env_file: services/LeaguesService/.env
    environment:
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5004
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.50"
    networks:
      - default
    restart: always

  matchdatasyncservice:
    container_name: matchdatasyncservice
    build:
      context: ./services/MatchDataSyncService
      dockerfile: Dockerfile
    ports:
      - "8010:8010"
      - "5010:5010" # Debugging port
    depends_on:
      - postgres
    #      - kafka
    env_file: services/MatchDataSyncService/.env_testing
    environment:
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5010
    networks:
      - default
    restart: always

  predictionsservice:
    container_name: predictionsservice
    build:
      context: ./services/PredictionsService
      dockerfile: Dockerfile
    ports:
      - "8007:8007"
      - "5007:5007" # Debugging port
    depends_on:
      - postgres
    #      - kafka
    env_file: services/PredictionsService/.env
    environment:
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.50"
    networks:
      - default
    restart: always

  usersservice:
    container_name: usersservice
    build:
      context: ./services/UsersService
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
      - "5001:5001" # Debugging port
    depends_on:
      - postgres
    #      - kafka
    env_file: services/UsersService/.env
    environment:
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5001
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.50"
    networks:
      - default
    restart: always

  ## UTILS
  wiremock:
    image: wiremock/wiremock:latest
    container_name: wiremock
    ports:
      - "8888:8080" # Exposes WireMock on port 8888
    volumes:
      - ./wiremock:/home/wiremock
    networks:
      - default
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.25"
    restart: always

  redis:
    image: redis:7.2.5
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - data-redis:/data
    command: [ "redis-server", "--save", "60", "1", "--loglevel", "warning" ]
    networks:
      - default
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.25"
    restart: always

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - default
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.25"
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m  # <= Reduce heap from 1g/1g to 512/512
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - default
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.1
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - default
    restart: always

  logstash:
    image: docker.elastic.co/logstash/logstash:8.17.1
    ports:
      - "5000:5000"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx512m
      - pipeline.workers=1
      - pipeline.batch.size=50
      - monitoring.enabled=false
      - xpack.monitoring.enabled=false
      - xpack.management.enabled=false
    networks:
      - default
    restart: always

volumes:
  data-postgres:
  data-redis:

networks:
  default:
    driver: bridge
